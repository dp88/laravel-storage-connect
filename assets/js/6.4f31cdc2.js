(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{169:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration","aria-hidden":"true"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),e("p",[t._v("Most of the package configuration can be done using your .env file, which is recommended.")]),t._v(" "),e("p",[t._v("If you want to edit the config file directly, first publish it to your own config directory using "),e("code",[t._v("php artisan vendor:publish")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"application-name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#application-name","aria-hidden":"true"}},[t._v("#")]),t._v(" Application name")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("STORAGE_CONNECT_APP_NAME=My fancy app name\n")])])]),e("p",[t._v("This is used for the root folder name in Google Drive. If you don't provide this we'll use the Laravel "),e("code",[t._v("APP_NAME")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"log-activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#log-activity","aria-hidden":"true"}},[t._v("#")]),t._v(" Log activity")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("STORAGE_CONNECT_LOG_ACTIVITY=false\n")])])]),e("p",[t._v("By default, this package does not do any logging. Instead it fires events and lets you choose how to handle them.")]),t._v(" "),e("p",[t._v("If you'd like activity logging, set this to true.")]),t._v(" "),e("h2",{attrs:{id:"authorize-routes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authorize-routes","aria-hidden":"true"}},[t._v("#")]),t._v(" Authorize routes")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("STORAGE_CONNECT_AUTHORIZE_ROUTE=true\n")])])]),e("p",[t._v("By default this package create a pre-wired route for kicking off the OAuth flow.")]),t._v(" "),e("p",[t._v("Disable this flag if you want to setup your own route and avoid this completely.")]),t._v(" "),e("h2",{attrs:{id:"route-middleware"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#route-middleware","aria-hidden":"true"}},[t._v("#")]),t._v(" Route middleware")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("STORAGE_CONNECT_MIDDLEWARE=web\n")])])]),e("p",[t._v("The pre-wired authorize route uses the "),e("code",[t._v("web")]),t._v(" middleware group by default.")]),t._v(" "),e("p",[t._v("You can change this by specifying a middleware name (or group name) here. If you change this make sure your middleware group includes "),e("code",[t._v("session")]),t._v(" so that CSRF is handled during the OAuth flow.")]),t._v(" "),e("h2",{attrs:{id:"redirecting-after-oauth"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redirecting-after-oauth","aria-hidden":"true"}},[t._v("#")]),t._v(" Redirecting after OAuth")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("STORAGE_CONNECT_REDIRECT_AFTER_CONNECT=/dashboard\n")])])]),e("p",[t._v("You can specify a redirect URL when using the pre-wired authorize route or when calling the authorize method, yourself, on a connection.")]),t._v(" "),e("p",[t._v("If a redirect URL is not explicitly passed in, this config will be used as a fallback.")]),t._v(" "),e("h2",{attrs:{id:"default-provider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-provider","aria-hidden":"true"}},[t._v("#")]),t._v(" Default provider")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("STORAGE_CONNECT_DEFAULT=dropbox\n")])])]),e("p",[t._v("This is used if you are managing connections yourself and make direct calls to the StorageConnect facade without specifying a provider.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[t._v("StorageConnect"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{attrs:{class:"token function"}},[t._v("upload")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token double-quoted-string string"}},[t._v('"/path/to/source.pdf"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{attrs:{class:"token double-quoted-string string"}},[t._v('"filename.pdf"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("This will use the default provider, load the storage from your custom callback, and then proceed to upload.")])])}],!1,null,null,null);r.options.__file="configuration.md";a.default=r.exports}}]);